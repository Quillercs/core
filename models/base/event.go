package base

const (
	EVENT_CUSTOM = iota
	EVENT_CLONE
	EVENT_CHANNEL_CREATE
	EVENT_CHANNEL_DESTROY
	EVENT_CHANNEL_STATE
	EVENT_CHANNEL_CALLSTATE
	EVENT_CHANNEL_ANSWER
	EVENT_CHANNEL_HANGUP
	EVENT_CHANNEL_HANGUP_COMPLETE
	EVENT_CHANNEL_EXECUTE
	EVENT_CHANNEL_EXECUTE_COMPLETE
	EVENT_CHANNEL_HOLD
	EVENT_CHANNEL_UNHOLD
	EVENT_CHANNEL_BRIDGE
	EVENT_CHANNEL_UNBRIDGE
	EVENT_CHANNEL_PROGRESS
	EVENT_CHANNEL_PROGRESS_MEDIA
	EVENT_CHANNEL_OUTGOING
	EVENT_CHANNEL_PARK
	EVENT_CHANNEL_UNPARK
	EVENT_CHANNEL_APPLICATION
	EVENT_CHANNEL_ORIGINATE
	EVENT_CHANNEL_UUID
	EVENT_API
	EVENT_LOG
	EVENT_INBOUND_CHAN
	EVENT_OUTBOUND_CHAN
	EVENT_STARTUP
	EVENT_SHUTDOWN
	EVENT_PUBLISH
	EVENT_UNPUBLISH
	EVENT_TALK
	EVENT_NOTALK
	EVENT_SESSION_CRASH
	EVENT_MODULE_LOAD
	EVENT_MODULE_UNLOAD
	EVENT_DTMF
	EVENT_MESSAGE
	EVENT_PRESENCE_IN
	EVENT_NOTIFY_IN
	EVENT_PRESENCE_OUT
	EVENT_PRESENCE_PROBE
	EVENT_MESSAGE_WAITING
	EVENT_MESSAGE_QUERY
	EVENT_ROSTER
	EVENT_CODEC
	EVENT_BACKGROUND_JOB
	EVENT_DETECTED_SPEECH
	EVENT_DETECTED_TONE
	EVENT_PRIVATE_COMMAND
	EVENT_HEARTBEAT
	EVENT_TRAP
	EVENT_ADD_SCHEDULE
	EVENT_DEL_SCHEDULE
	EVENT_EXE_SCHEDULE
	EVENT_RE_SCHEDULE
	EVENT_RELOADXML
	EVENT_NOTIFY
	EVENT_PHONE_FEATURE
	EVENT_PHONE_FEATURE_SUBSCRIBE
	EVENT_SEND_MESSAGE
	EVENT_RECV_MESSAGE
	EVENT_REQUEST_PARAMS
	EVENT_CHANNEL_DATA
	EVENT_GENERAL
	EVENT_COMMAND
	EVENT_SESSION_HEARTBEAT
	EVENT_CLIENT_DISCONNECTED
	EVENT_SERVER_DISCONNECTED
	EVENT_SEND_INFO
	EVENT_RECV_INFO
	EVENT_RECV_RTCP_MESSAGE
	EVENT_CALL_SECURE
	EVENT_NAT
	EVENT_RECORD_START
	EVENT_RECORD_STOP
	EVENT_PLAYBACK_START
	EVENT_PLAYBACK_STOP
	EVENT_CALL_UPDATE
	EVENT_FAILURE
	EVENT_SOCKET_DATA
	EVENT_MEDIA_BUG_START
	EVENT_MEDIA_BUG_STOP
	EVENT_CONFERENCE_DATA_QUERY
	EVENT_CONFERENCE_DATA
	EVENT_CALL_SETUP_REQ
	EVENT_CALL_SETUP_RESULT
	EVENT_CALL_DETAIL
	EVENT_DEVICE_STATE
	EVENT_ALL
)

type Event struct {
	EventType int   `json:"event_type"`
	Date      int64 `json:"date"`
}

func NewEvent(eventType int) *Event {
	return &Event{eventType}
}
